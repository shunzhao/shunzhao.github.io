import{_ as t,c as r,o as e,a3 as a}from"./chunks/framework.Cv3JQ2Vj.js";const u=JSON.parse('{"title":"python笔记","description":"","frontmatter":{"title":"python笔记","date":"2017-04-07T00:00:00.000Z"},"headers":[],"relativePath":"posts/python-bi-ji.md","filePath":"posts/python-bi-ji.md"}'),i={name:"posts/python-bi-ji.md"},o=a('<h1 id="python笔记" tabindex="-1">python笔记 <a class="header-anchor" href="#python笔记" aria-label="Permalink to &quot;python笔记&quot;">​</a></h1><h2 id="数字类型及操作" tabindex="-1">数字类型及操作 <a class="header-anchor" href="#数字类型及操作" aria-label="Permalink to &quot;数字类型及操作&quot;">​</a></h2><p>abs(x) 绝对值 x的绝对值、<br> divmod(x,y) 商余 同时输出商和余数<br> pow(x,y) 计算x的Y次方<br> round(x,y) 对X进行四舍五入截取 y表示小数截取的位数 和php中的round函数一样<br> range(365) range是范围的意思<br> max() 返回最大值<br> min() 返回最小值<br> int() 将一个变量转换成整数<br> float() 将一个变量转换成浮点数</p><h2 id="字符串类型及操作" tabindex="-1">字符串类型及操作 <a class="header-anchor" href="#字符串类型及操作" aria-label="Permalink to &quot;字符串类型及操作&quot;">​</a></h2><p>hex(x)或oct(x) 返回整数x的十六进制或返回整数x的八进制小写形式字符串<br> chr(x) x为unicode编码，返回其对应的字符<br> ord(x) x为字符，返回其对应的unicode编码<br> eval() 取出字符串两侧的引号<br> str() 在变量两侧加上引号<br> len(x) 返回字符串x的长度 len(&#39;aaaa&#39;) 结果为4<br> str.join(iter) 在iter变量除去最后一个元素外的每一个元素后增加str &#39;,&#39;.join(&#39;123456&#39;) &#39;1,2,3,4,5,6&#39;<br> cents(width,[var]) 顾名思义就是居中字符串 第一个参数代表宽度，第二个参数代表两侧填充的字符<br> n*x 复制n次字符串x<br> x in s 如果x是s的子串，返回true 否则返回false<br> str.lower() 将字符串转换成小写<br> str.upper() 将字符串转换成大写<br> str.split(sep=none) 返回一个列表，有str根据sep被分割的部分组成的 &#39;1.2.3.4.5.6&#39;.split(&#39;.&#39;) [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;]<br> str.count(sub) 返回sub在字符串中出现的次数 &#39;abacad&#39;.count(&#39;a&#39;) 3<br> str.replace(old,new) 用new替换字符串中某一个或一段old &#39;abcdef&#39;.replace(&#39;ab&#39;,&#39;b&#39;) &#39;bcdef&#39;<br> str.center(width,[fillchar]) 顾名思义就是居中字符串 第一个参数代表宽度，第二个参数代表两侧填充的字符<br> str.strip(chars) 从字符串中去除两边的chars字符 &#39;=aa=&#39;.strip(&#39;=&#39;) &#39;aa&#39;</p><h2 id="time库的使用" tabindex="-1">time库的使用 <a class="header-anchor" href="#time库的使用" aria-label="Permalink to &quot;time库的使用&quot;">​</a></h2><p>import time #引入time 库<br> time.time() 获取时间戳 和php中的 time()函数一样<br> time.ctime()<br> //格式化时间 strftime() 函数 demo：<br> t = time.gmtime()<br> time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,t)<br> //将字符串转化成时间戳 demo：<br> timeStr=&#39;2018-01-31 21:58:20&#39;<br> time.strptime(timeStr,&quot;%Y-%m-%d %H:%M:%S&quot;)<br> time.perf_counter() 返回一个CPU级别的精确时间计数值 单位为秒 类似于PHP中的 microtime(true) 函数用法小例子 可以计算脚本的执行时间 perf是性能的意思 counter 是计数器的意思<br> time.sleep() sleep 用于休眠 和php中的 sleep函数一样的用处 可以让程序延时执行 sleep是休眠的意思</p><h2 id="分支结构" tabindex="-1">分支结构 <a class="header-anchor" href="#分支结构" aria-label="Permalink to &quot;分支结构&quot;">​</a></h2><p>if：elif：else： 单行紧凑形式 表达式1 if: 条件 else 表达式2<br> 这里需要注意一点，在python中 是没有 || &amp;&amp; 这种逻辑运算符的 只有 and、or、not</p><h2 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h2><p>try:<br> &lt;语句块1&gt;<br> except:<br> &lt;语句块2&gt;</p><p>try:<br> &lt;语句块1&gt;<br> except NameError: #这里指定一个异常处理的异常类型，只要定义了类型后，就只能处理这个类型的异常<br> &lt;语句块2&gt;</p><p>异常处理的高级应用<br> try:<br> &lt;语句块1&gt;<br> except:<br> &lt;语句块2&gt;<br> else:<br> &lt;语句块3&gt;<br> finally:<br> &lt;语句块4&gt;<br> 首先判断语句块1 是否 抛出异常，如果抛出异常则执行语句块2，不抛出异常执行语句块3，<br> 需要注意的是finally也就是语句块4，不管是否有异常都会一定执行。<br> 这样就可以增加更多的异常处理</p>',13),n=[o];function b(s,p,l,h,c,d){return e(),r("div",null,n)}const x=t(i,[["render",b]]);export{u as __pageData,x as default};
