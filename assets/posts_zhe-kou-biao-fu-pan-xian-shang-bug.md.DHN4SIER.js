import{_ as e,c as a,o as i,a3 as t}from"./chunks/framework.Cv3JQ2Vj.js";const d=JSON.parse('{"title":"折扣标复盘线上BUG","description":"","frontmatter":{"title":"折扣标复盘线上BUG","date":"2024-06-22T00:00:00.000Z"},"headers":[],"relativePath":"posts/zhe-kou-biao-fu-pan-xian-shang-bug.md","filePath":"posts/zhe-kou-biao-fu-pan-xian-shang-bug.md"}'),l={name:"posts/zhe-kou-biao-fu-pan-xian-shang-bug.md"},o=t('<h1 id="折扣标复盘线上bug" tabindex="-1">折扣标复盘线上BUG <a class="header-anchor" href="#折扣标复盘线上bug" aria-label="Permalink to &quot;折扣标复盘线上BUG&quot;">​</a></h1><h2 id="问题处理流程" tabindex="-1">问题处理流程 <a class="header-anchor" href="#问题处理流程" aria-label="Permalink to &quot;问题处理流程&quot;">​</a></h2><ol><li>2024-06-18 17:32 提交测试用例</li><li>2024-06-18 17:41 提交优化代码</li><li>2024-06-19 09:19 同事说明天要上线了让我合代码，说了两遍</li><li>2024-06-19 09:20 回了一句&quot;不合了，下期再说&quot;</li><li>2024-06-19 09:33 这段代码被同事给 merge 进入 release 分支</li><li>2024-06-19 09:42 通知测试重新发布 dev -&gt; beta -&gt; preview</li><li>2024-06-20 22:48 监控正式发布到 online</li><li>2024-06-21 08:08 技术支持反馈无法打印折扣标</li><li>2024-06-21 08:30 到达公司确认问题，当时看提示瞬间知道问题所在了，一看 master 分支两眼一黑</li><li>2024-06-21 08:34 删除被 merge 的代码，创建对应测试单据，向测试确认是否有时间测试</li><li>2024-06-21 08:38 测试 beta 复现问题</li><li>2024-06-21 09:03 测试通过、发布到 preview 准备上线</li><li>2024-06-21 09:17 上线流程走完、向技术支持回复问题已解决，请门店重新作业。</li></ol><p>从发现到修复到上线，差不多花了一个小时左右的时间，事后复盘错误我占大部分，毕竟代码是我提交的，这个我也承认，该认错认错。</p><h2 id="我为什么会上传这段代码" tabindex="-1">我为什么会上传这段代码？ <a class="header-anchor" href="#我为什么会上传这段代码" aria-label="Permalink to &quot;我为什么会上传这段代码？&quot;">​</a></h2><p>因为当时的我想着优化下代码，在后端加个校验，防止别人绕过前端的校验直接打接口，所以就写了一个半成品，晚上下班前随着其他的测试用例一起提交了上去加代码量，准备第二天接着写，但第二天有其他的事情耽搁后就放弃了，想着反正也只是一个优化，跟着下个版本再上吧，不影响这一期的功能，所以我压根就没有准备合到 release 分支上，所以同事在让我合代码的时候，我确认了当时只有我的提交的情况下才答复<strong>不合了下期再说</strong>。</p><p>而且到现在我也没想明白，过后我又特意的看了一眼提交记录，在上次 merge 到最后一次上线前期间只有我的代码提交记录</p><p>我能够理解同事要 merge 自己提交的代码时顺带着把我的代码也合进去了的情况。</p><p>我能理解同事以为漏合了，然后帮忙 merge 进去的情况。</p><p>但是我无法理解让我去 merge，然后在我答复了的情况下给我合进去了情况，why？</p><h2 id="如何避免此类事情再发生" tabindex="-1">如何避免此类事情再发生 <a class="header-anchor" href="#如何避免此类事情再发生" aria-label="Permalink to &quot;如何避免此类事情再发生&quot;">​</a></h2><p>当然组内也讨论了如何再避免这类的事情发生，当时组长说了大约四点：</p><ul><li>不是这期的需求就不要提交上来了、</li><li>没有写完的代码不要提交，</li><li>上线之前检查提交记录看是否是需要上线的记录</li><li>merge 代码包含其他同事的 commit 要确认</li></ul><p>除了第二条外，其他的我都挺赞同的，但是没写完的代码不能提交这个感觉有点问题，因为 dev 分支本身就是不确定的，况且远程仓库本身的作用就是协同工作和分布式备份、比如我在公司写了一半，想着回家再写，在不影响编译的情况下，完全可以把代码 push 上去，然后回到家连上 vpn 再拉下来继续接着写，这是一个很常见的情况。</p><p>不过我们组内在 merge 代码时，不管是不是自己 commit 的代码，都是直接把全部 commit 都 merge 到 release，其实我一直觉得这样有问题，因为这就会导致 merge 代码的同事需要承担他本身不应该承担的风险，毕竟他是不知道其他人 commit 的代码是否能被 merge，而 commit 的同事也要承担自己代码一定完全符合业务流程才能提交，不然就要担心被 merge 进去，包括当时总监也问过组长说：“那你怎么确定这个代码是能够被 merge 进去的呢？“，组长一时也懵了，毕竟这个提交能否被 merge 只有 commit 的同事他自己知道，其他人在不了解业务的同事不知道很正常，所以要么 cheery-pick 自己的 commit ，要么在 merge 时向其他 commit 的同事确认。</p>',15),r=[o];function n(m,s,p,c,h,u){return i(),a("div",null,r)}const _=e(l,[["render",n]]);export{d as __pageData,_ as default};
