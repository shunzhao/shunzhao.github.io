import{_ as t,c as a,o as e,a3 as p}from"./chunks/framework.Cv3JQ2Vj.js";const l=JSON.parse('{"title":"C# 向方法传递参数 ref与out","description":"","frontmatter":{"title":"C# 向方法传递参数 ref与out","date":"2017-04-12T00:00:00.000Z"},"headers":[],"relativePath":"posts/csharp-xiang-fang-fa-chuan-di-can-shu-ref-yu-out.md","filePath":"posts/csharp-xiang-fang-fa-chuan-di-can-shu-ref-yu-out.md"}'),o={name:"posts/csharp-xiang-fang-fa-chuan-di-can-shu-ref-yu-out.md"},n=p('<h1 id="c-向方法传递参数-ref与out" tabindex="-1">C# 向方法传递参数 ref与out <a class="header-anchor" href="#c-向方法传递参数-ref与out" aria-label="Permalink to &quot;C# 向方法传递参数 ref与out&quot;">​</a></h1><p>ref:输入参数，必须传一个赋过值的变量，在方法内部可修改这个变量</p><p>例如：</p><p>创建两个变量，且要赋初始值</p><p>int a = 1; int b = 1;</p><p>然后写一个方法</p><p>public void SetNum(ref int c, ref int d) { c = 10; d = 10; }</p><p>调用的方法：</p><p>SetNum(ref a, ref b);//方法名(参数，参数)</p><p>这样当我们输出a，b两个的值就不是1了，而是方法里面的c，d的值了。</p><p>输出--在方法内部赋值，使用这个方发时只需要传一个变量就行了不用赋值</p><p>例如：</p><p>还是要创建两个变量，只不过不需要赋初始值</p><p>int a1 = 1; int b1 = 1;</p><p>一样写个方法</p><p>public void SetoutNum(out int c, out int d) { e = 10; f = 10; }</p><p>调用的方法：</p><p>SetoutNum(out a1, out b1);</p><p>这样当我们输出a1，b1两个的值就是方法里面的e，f的值了。</p>',19),r=[n];function u(c,i,s,f,_,d){return e(),a("div",null,r)}const m=t(o,[["render",u]]);export{l as __pageData,m as default};
