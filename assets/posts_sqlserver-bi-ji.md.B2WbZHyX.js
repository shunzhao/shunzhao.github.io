import{_ as p,c as e,o as t,a3 as r}from"./chunks/framework.Cv3JQ2Vj.js";const f=JSON.parse('{"title":"SQL Server 笔记","description":"","frontmatter":{"title":"SQL Server 笔记","date":"2017-03-23T00:00:00.000Z"},"headers":[],"relativePath":"posts/sqlserver-bi-ji.md","filePath":"posts/sqlserver-bi-ji.md"}'),a={name:"posts/sqlserver-bi-ji.md"},n=r(`<h1 id="sql-server-2012数据库管理与开发" tabindex="-1">*****SQL SERVER 2012数据库管理与开发***** <a class="header-anchor" href="#sql-server-2012数据库管理与开发" aria-label="Permalink to &quot;\\*\\*\\*\\*\\*SQL SERVER 2012数据库管理与开发\\*\\*\\*\\*\\*&quot;">​</a></h1><h2 id="t1" tabindex="-1">-----------T1----------- <a class="header-anchor" href="#t1" aria-label="Permalink to &quot;\\-----------T1-----------&quot;">​</a></h2><p>一、数据库基本术语</p><p>1、数据库-DB（全称DataBase）</p><p>2、数据库管理系统-DBMS（全称DataBase Management System）</p><p>3、数据库管理员DBA 全称（DataBase Administrator）</p><p>二、概念模型的基本术语</p><p>1、键（Key）：唯一标识实体的属性集</p><p>2、主键：(Primary Key)通常把不可重复的键设置为主键（如：学号）</p><p>3、次键：不能唯一标识实体属性的键（如：性别，年龄）</p><p>4、域：属性的取值范围</p><p>5、联系：两个实体集之间的联系包含三种，如下</p><p>1）：一对一联系(1:1)如：班级和正班长</p><p>2）：一对多联系(1:m)如：部门和员工</p><p>3）：多对多联系(m:n)如：老师和学生</p><p>6、概念模型的表示方法：用E-R图来描述现实世界的概念模型。</p><h2 id="t2" tabindex="-1">-----------T2----------- <a class="header-anchor" href="#t2" aria-label="Permalink to &quot;\\-----------T2-----------&quot;">​</a></h2><p>一、打开SQL SERVER(MSSQLSERVER)服务器两种方法:</p><p>1、SQL Server 配置管理器</p><p>2、我的电脑-管理-服务</p><p>二、两种身份验证</p><p>1、Windows身份验证：用户身份由Windows操作系统进行确认，SQL Server不要求提供密码，也不执行身份认证。</p><p>2、SQL Server身份验证：用户名和密码均由SQL Server创建并存储于SQL Server中，对于通过SQL Server身份验证进行连接的用户，每次连接时都必须提供登录名和密码；登录本地SQL Server服务器，Windows身份验证是默认的身份验证模式，并比SQL Server身份验证更加安全。</p><p>三、SQL Server数据库主文件后缀名为.mdf，日志文件后缀名为.ldf</p><p>四、数据库的分离和附加：</p><p>1、分离数据库：分离之后是创建好的数据库与SQL Server服务进行隔离，才能对数据库进行备份，拷贝操作。</p><p>2、附加数据库：将数据库文件添加到SQL Server管理平台当中</p><p>五、创建数据库</p><p>1、直接在对象资源管理器中创建数据库，创建表，添加约束</p><p>六、查看数据库信息</p><p>1、使用exec sp_helpdb 数据库名（exec 是执行存储过程的命令，sp_helpdb 是系统提供的默认存储过程，记录着所有数据库信息）</p><p>七、数据库当中常用的数据类型</p><p>1、整数类型：int</p><p>2、小数类型：decimal</p><p>3、固定长度非Unicode字符：char(10)(存储固定长度非Unocode字符，最多可存储8000个字节。)</p><p>4、固定长度的Unicode字符：nchar(存储固定长度Unocode字符，最多可存储8000个字节。)</p><p>5、可变长度非Unicode字符：varchar(10)(存储可变长度非Unocode字符，但可根据实际存储的字符数改变存储空间。)</p><p>6、可变长度Unicode字符：nvarchar(与varchar类似，存储可变长度unicode的字符数据。最多可存储4000个字符。一个unicode字符占两个字节，可将全世界的文字囊括在内。)</p><p>7、日期：date (日期)</p><p>8、日期时间：datetime (日期+时间)</p><p>9、bit（位型：值要么是0，要么是1，与c#中布尔类型类似）</p><p>10、text（文本类型）</p><p>11、money(货币类型)</p><p>12、image（图像类型：存储可变长度的二进制数据）</p><h2 id="t3" tabindex="-1">-----------T3----------- <a class="header-anchor" href="#t3" aria-label="Permalink to &quot;\\-----------T3-----------&quot;">​</a></h2><p>一、使用命令创建数据库(使用T-SQL编程)</p><p>1、使用命令创建数据库</p><p>create database DB</p><p>on</p><p>(</p><p>name=DB_data,--数据库主文件，存储所有数据的文件</p><p>filename=&#39;D:\\\\DB_data.mdf&#39;,</p><p>size=50mb,</p><p>maxsize=100mb,</p><p>filegrowth=15%</p><p>)</p><p>log on</p><p>(</p><p>name=DB_log,--数据库日志文件，对数据库当中数据的操作会记录到日志文件当中</p><p>filename=&#39;D:\\\\DB_log.ldf&#39;,</p><p>size=50mb,</p><p>filegrowth=5%</p><p>)</p><p>1、数据库主文件：存储所有数据的文件</p><p>2、数据库日志文件：对数据库当中数据的操作会记录到日志文件当中</p><p>3、使用数据库 ：use 数据库名称</p><p>4、使用某个数据库的命令 ：use 数据库名称</p><p>1、创建表命令</p><p>表名为：studentInfor，字段：学号strID，姓名name，性别sex，备注remark</p><p>create table studentInfor</p><p>(</p><p>strID int ,--学号</p><p>name nvarchar(20),--姓名（not null是不为空的意思）</p><p>sex nchar(2),--性别</p><p>remark text --备注（text是文本类型）</p><p>)</p><h2 id="t4" tabindex="-1">-----------T4----------- <a class="header-anchor" href="#t4" aria-label="Permalink to &quot;\\-----------T4-----------&quot;">​</a></h2><p>一、数据完整性定义、作用和分类</p><p>1、数据完整性即用于保证数据库中的数据在逻辑上的一致性、正确性和可靠性。</p><p>2、数据完整性用于防止无效数据或错误数据保存进数据库。</p><p>3、数据完整性主要包含：实体完整性、域完整性和参照完整性。</p><p>(1、实体完整性:规定表的每一行记录在表中是唯一的，它主要包含主键约束，自增约束和唯一约束。</p><p>(2、域完整性：指给定列输入的有效性，即保证指定列的数据具有正确的数据类型、格式和有效的数据范围。一般通过定义NOT NULL、check约束和默认值约束来实现。</p><p>(3、参照完整性：定义了一个关系数据库的不同的表中列之间的关系（主键和外键），可以保证主从表中数据的一致性，一般通过外键约束来实现</p><p>二、约束</p><p>1、主键约束(Primary Key约束)</p><p>主键约束用于唯一识别每一条记录，数据表中具有唯一值的字段可设定为主键字段</p><p>2、自增约束（IDENTITY 约束）</p><p>字段值按一定的增长规则自动增长，只能在整数类型的字段上设置自增约束，不能对设定了自增约束的字段内容进行输入操作，通常在整数类型的主键上设置自增约束。</p><p>3、唯一约束（Unique 约束）</p><p>唯一约束保证在一个字段或一组字段中的数据与表中其他行的数据相比是唯一的，与主键约束相比，唯一约束也用于确保列中不存在重复值，但其列值可以是NULL，每个表可以有多个唯一约束，但只能有一个主键约束。</p><p>4、CHECK约束用于限制字段值的范围，如可在字段“性别”上设置CHECK约束</p><p>5、外键约束（foreign key）保证主从表中数据的一致性</p><p>6、默认约束(default) 给定列设置默认值</p><p>添加约束</p><p>刚开始创建表是添加约束</p><p>1、表名为：studentInfor</p><p>create table studentInfor</p><p>(</p><p>strID int primary key identity(1000,1),----学号（primary key是主键的意思，identity(1000,1)设置自动增长）</p><p>name nvarchar(20) not null,----------------姓名（not null是不为空的意思）</p><p>sex nchar(2) check sex=&#39;男&#39; or sex=&#39;女&#39;,---性别（使用check 约束性别只能是男或女）</p><p>remark text ---备注（text 是文本类型）</p><p>)</p><p>使用命令给建好的表 studentDB中的序号列（列名：ID）添加约束(推荐使用这个命令来创建约束)</p><p>1、添加主键约束：alter table studentDB add constraint PK_ID primary key(ID)</p><p>2、添加自增约束：alter table studentDB add ID INT identity(默认值,增量)</p><p>3、添加唯一约束：alter table studentDB add constraint UQ_ID unique ID</p><p>4、添加默认约束：alter table studentDB add constraint DF_ID default &#39;默认值&#39; for ID</p><p>5、添加外键约束：alter table studentDB add constraint PK_ID foreign key(ID) reference studentDB(ID)</p><p>6、CHECK约束：alter table 表名 add constraint CK_ID check(条件)</p><p>2、查看表信息（表名为：A）</p><p>1、查看A表中所有字段的所有信息</p><p>select * from A</p><p>2、查看A表中字段姓名的所有信息</p><p>select 姓名 from A</p><p>3、查看A表中字段姓名和性别的所有信息</p><p>select 姓名,性别 from A</p><h2 id="t5" tabindex="-1">-----------T5----------- <a class="header-anchor" href="#t5" aria-label="Permalink to &quot;\\-----------T5-----------&quot;">​</a></h2><p>使用DML操作数据</p><p>DML：数据操纵语言（Data Manipulation Language）</p><p>一、使用Insert into 插入数据</p><p>语法结构：</p><p>1、一次插入一条数据：</p><p>insert into 表名(列名1,列名2...) values(&#39;值1&#39;,&#39;值2&#39;,...)</p><p>2、一次插入多条数据：</p><p>insert into 表名(列1,列2,...)</p><p>select (&#39;值1&#39;,&#39;值2&#39;,...)union</p><p>select (&#39;值1&#39;,&#39;值2&#39;,...)union</p><p>select (&#39;值1&#39;,&#39;值2&#39;,...)</p><p>3、插入数据时若没有指定可为空的列，则默认为null</p><p>二、使用select查询表数据</p><p>语法结构：</p><p>1、查看部分列数据：select 字段1,字段2 from 表名</p><p>2、查看所有列数据：select * from 表名</p><p>3、条件查询：select * from 表名 where 条件</p><p>三、使用update修改表数据</p><p>语法结构：</p><p>1、修改列所有数据：update 表名 set 字段1=&#39;修改后的值&#39;</p><p>2、按条件修改列数据：update 表名 set 字段1=&#39;修改后的值&#39; where 条件</p><p>四、使用delete 删除表数据</p><p>1、delete 表名</p><p>2、delete 表名 where 条件</p><p>五、drop table 表名 彻底删除表-包含表结构</p><pre><code>drop database 数据库名称  删除整个数据库
</code></pre><p>六、if exists函数</p><p>--如果在系统提供的数据库信息表当中找到了名称为&quot;abc&quot;的数据库,就删除</p><pre><code> if exists(select \\* from sysdatabase where name=&#39;abc&#39;)
</code></pre><p>begin</p><p>drop database abc</p><p>end</p><pre><code> else
</code></pre><p>begin</p><p>create database abc</p><p>end</p><p>--如果存在这张表就先把这张表删除</p><pre><code> if exists(select \\* from sysobjects where name=&#39;表名&#39;)
</code></pre><p>begin</p><p>drop table 表名</p><p>end</p><pre><code> else 
</code></pre><p>begin</p><p>create table 表名</p><p>(</p><p>字段1,</p><p>字段2,</p><p>...</p><p>)</p><p>end</p><h2 id="t6" tabindex="-1">-----------T6----------- <a class="header-anchor" href="#t6" aria-label="Permalink to &quot;\\-----------T6-----------&quot;">​</a></h2><p>七、运算符</p><p>1、等于 =</p><p>2、大于 &gt;</p><p>3、小于 &lt;</p><p>4、大于等于 &gt;=</p><p>5、小于等于 &lt;=</p><p>6、不等于 &lt;&gt;</p><p>7、不等于 !=</p><p>八、去除重复行distinct</p><p>select distinct * from 表名</p><p>九、排序order by asc/desc</p><p>1、单列排序</p><p>select * from 表名 order by 字段名 asc--(或者desc)</p><p>2、多列排序</p><p>select * from 表名 order by 字段名1 asc,字段名2 asc--(或者desc)</p><p>十、使用top 返回前几行数据</p><p>1、select top 5 * from 表名 返回前5行数据</p><p>2、select top 5 percent * from 表名 返回所有数据的前5%行记录</p><p>十一、使用is null 和is not null</p><p>1、select * from 表名 where 字段名 is null返回结果为null的值</p><p>2、select * from 表名 where 字段名 is not null 返回结果不为null的值</p><p>十一、临时表into</p><p>如：select * into #demp from 表名</p><p>select * from #demp</p><h2 id="t7" tabindex="-1">-----------T7----------- <a class="header-anchor" href="#t7" aria-label="Permalink to &quot;\\-----------T7-----------&quot;">​</a></h2><p>一、模糊查询和聚合函数</p><p>1、like运算符中%和_通配符的使用</p><p>(1、select * from where 字段名 like %&#39;张&#39;% --百分号可以为多个字符</p><p>(2、select * from where 字段名 like _&#39;张&#39;_ --_只能为一个字符</p><p>2、in运算符</p><pre><code>--查询字段名的值在（）之内
</code></pre><p>(1、select * from 表名 where 字段名 in(&#39;值1&#39;,&#39;值2&#39;)</p><p>3、between A and B运算符</p><pre><code>--查询字段名的值在A~B之间的所有数据
</code></pre><p>(1、select * from 表名 where 字段名 between A and B</p><p>二、聚合函数</p><p>1、sum(字段名) 求和函数</p><p>2、min(字段名) 求最小值函数</p><p>3、max(字段名) 求最大值函数</p><p>4、agv(字段名) 求平均数</p><p>5、count 求选择的列或记录的行数</p><h2 id="t8" tabindex="-1">-----------T8----------- <a class="header-anchor" href="#t8" aria-label="Permalink to &quot;\\-----------T8-----------&quot;">​</a></h2><p>一、使用group by分组</p><p>1、对一个字段进行分组：</p><p>select * from 表名 group by 字段名</p><p>2、多字段分组：</p><p>select * from 表名 group by 字段1,字段2</p><p>3、使用having对分组后的数据进行过滤</p><p>select * from 表名</p><p>where 1=1</p><p>group by 字段</p><p>having count(*)&gt;2</p><p>order by 字段</p><p>二、连接查询</p><p>1、交叉连接 cross join</p><p>2、内连接 inner join</p><p>3、左连接 left outer join</p><p>4、右连接 right outer join</p><p>5、全连接 full join</p><p>6、自连接 select * from A,B where A.字段名=B.字段名</p>`,230),o=[n];function s(l,i,c,d,h,m){return t(),e("div",null,o)}const b=p(a,[["render",s]]);export{f as __pageData,b as default};
