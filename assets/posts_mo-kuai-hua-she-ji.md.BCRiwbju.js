import{_ as a,c as e,o as t,a3 as o}from"./chunks/framework.Cv3JQ2Vj.js";const m=JSON.parse('{"title":"模块化设计","description":"","frontmatter":{"title":"模块化设计","date":"2018-05-05T00:00:00.000Z"},"headers":[],"relativePath":"posts/mo-kuai-hua-she-ji.md","filePath":"posts/mo-kuai-hua-she-ji.md"}'),i={name:"posts/mo-kuai-hua-she-ji.md"},r=o('<h1 id="模块化设计" tabindex="-1">模块化设计 <a class="header-anchor" href="#模块化设计" aria-label="Permalink to &quot;模块化设计&quot;">​</a></h1><ol><li><p>通过函数或对象封装将程序划分为模块及模块间的表达</p></li><li><p>具体包括：主程序、子程序与子程序间的关系</p></li><li><p>分而治之：一种分而治之、分层抽象、体系化的设计思想</p></li><li><p>紧耦合与松耦合</p></li></ol><h2 id="紧耦合-两个部分交流很多-无法独立存在" tabindex="-1">紧耦合：两个部分交流很多，无法独立存在 <a class="header-anchor" href="#紧耦合-两个部分交流很多-无法独立存在" aria-label="Permalink to &quot;紧耦合：两个部分交流很多，无法独立存在&quot;">​</a></h2><h2 id="松耦合-两个部分交流很少-他们之间有非常清晰简单的接口-可以独立存在" tabindex="-1">松耦合：两个部分交流很少，他们之间有非常清晰简单的接口，可以独立存在 <a class="header-anchor" href="#松耦合-两个部分交流很少-他们之间有非常清晰简单的接口-可以独立存在" aria-label="Permalink to &quot;松耦合：两个部分交流很少，他们之间有非常清晰简单的接口，可以独立存在&quot;">​</a></h2><p>建议在编写程序的时候，通过函数将一段代码与其他部分分开，对于函数的输入参数与返回值就是与其他代码之间的交流通道，这样的交流通道越少越清晰，那么定义的函数的复用性就越高，所以在模块化设计中，模块内部(也就是函数内部)尽可能的紧耦合，他们之间通过局部变量执行大量的数据传输，但是在模块之间(也就是函数与函数之间)要尽可能的减少传递参数与返回值，让它们以松耦合的形式进行组织，这样每个函数才有可能被更多的函数所调用，它的代码才有可能更多的复用，这就是模块化设计思想的基本思路</p><h2 id="理解方法思维" tabindex="-1">理解方法思维 <a class="header-anchor" href="#理解方法思维" aria-label="Permalink to &quot;理解方法思维&quot;">​</a></h2><p>模块化思维：确定模块接口，封装功能<br> 规则化思维：抽象过程为规则、计算机自动执行<br> 化繁为简：将大功能变成小功能组合，分而治之</p>',7),s=[r];function l(h,n,c,_,d,p){return t(),e("div",null,s)}const f=a(i,[["render",l]]);export{m as __pageData,f as default};
