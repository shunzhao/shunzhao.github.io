import{_ as t,c as a,o as e,a3 as s}from"./chunks/framework.Cv3JQ2Vj.js";const g=JSON.parse('{"title":"JavaScript动态添加CSS样式的几种方法","description":"","frontmatter":{"title":"JavaScript动态添加CSS样式的几种方法","date":"2017-06-12T00:00:00.000Z"},"headers":[],"relativePath":"posts/javascript-dong-tai-tian-jia-css-yang-shi-de-ji-zhong-fang-fa.md","filePath":"posts/javascript-dong-tai-tian-jia-css-yang-shi-de-ji-zhong-fang-fa.md"}'),p={name:"posts/javascript-dong-tai-tian-jia-css-yang-shi-de-ji-zhong-fang-fa.md"},o=s('<h1 id="javascript动态添加css样式的几种方法" tabindex="-1">JavaScript动态添加CSS样式的几种方法 <a class="header-anchor" href="#javascript动态添加css样式的几种方法" aria-label="Permalink to &quot;JavaScript动态添加CSS样式的几种方法&quot;">​</a></h1><p>上个星期四就是JavaScript的期末考试，其中第二题的题目是动态创建无序列表(ul-li-a，css)当时因为机房是版本Vs2010，在动态添加样式的时候通过名字.style.属性的时候，没提示。直接写的话有的样式不能应用上去。</p><p>比如写个浮动样式，名字.style.Float=&quot;left&quot;应用不上去，在家里的vs2012正确的应该是名字.style.cssFloat = &quot;left&quot;</p><p>后来老师在机房又教了另外一种写法 setAttribute()</p><p>语法：</p><p>添加样式属性 ：名字.style.setAttribute(&quot;属性名&quot;,&quot;属性值&quot;) 添加元素属性 ：名字.setAttribute(&quot;属性名&quot;,&quot;属性值&quot;)</p><p>demo：</p><p>名字.style.setAttribute(&quot;background-color&quot;,&quot;#f00&quot;)</p><p>这样写就很简单了。后来我自己又百度了一下。不仅发现setAttribute() 的用途很多 还发现另外的几种添加样式的写法</p><p>语法：</p><p>1、设置cssText</p><p>名字.style.cssText = &#39;height: 100px&#39;;</p><p>2、setAttribute() 另外一种写法 important 可有可无 ps：!important的作用是提高指定样式规则的应用优先权。语法格式如下，定义的语法的最后面。</p><p>名字.setAttribute(&#39;style&#39;, &#39;height: 100px !important&#39;);</p><p>3、使用setProperty 如果要设置!important，推荐用这种方法设置第三个参数</p><p>名字.style.setProperty(&#39;height&#39;, &#39;300px&#39;, &#39;important&#39;);</p><p>4、直接设置style的属性</p><p>如果属性有&#39;-&#39;号，就写成驼峰的形式：</p><p>名字.style.cssFloat = &quot;left&quot;</p><p>如果想保留 - 号，就中括号的形式：</p><p>名字.style[&#39;text-align&#39;] = &#39;100px&#39;;</p><p>5、 直接设置属性（只能用于某些属性，相关样式会自动识别）</p><p>名字.setAttribute(&#39;height&#39;, &#39;100px&#39;)</p>',23),i=[o];function r(n,c,l,u,h,_){return e(),a("div",null,i)}const q=t(p,[["render",r]]);export{g as __pageData,q as default};
