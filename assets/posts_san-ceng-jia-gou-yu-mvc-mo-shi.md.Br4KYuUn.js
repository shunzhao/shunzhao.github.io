import{_ as e,c as a,o as t,a3 as o}from"./chunks/framework.Cv3JQ2Vj.js";const u=JSON.parse('{"title":"三层架构与MVC模式","description":"","frontmatter":{"title":"三层架构与MVC模式","date":"2018-02-12T00:00:00.000Z"},"headers":[],"relativePath":"posts/san-ceng-jia-gou-yu-mvc-mo-shi.md","filePath":"posts/san-ceng-jia-gou-yu-mvc-mo-shi.md"}'),r={name:"posts/san-ceng-jia-gou-yu-mvc-mo-shi.md"},s=o('<h1 id="三层架构与mvc模式" tabindex="-1">三层架构与MVC模式 <a class="header-anchor" href="#三层架构与mvc模式" aria-label="Permalink to &quot;三层架构与MVC模式&quot;">​</a></h1><p>最近一直在复习PHP，与其说是复习，其实基本上等于重学了，前段时间学习到了MVC模式，当时突然就想到了原来一年级学C#的时候，学习的三层架构，老师讲的就是将界面层（UIL）、业务逻辑层（BLL）、数据层（DAL），第一次用这种架构开发的时候，我还在想，这样好麻烦，还不如混合写，后来又用了一两次后，我个人就觉得确实要比混合写来的爽的多，现在又接触到了MVC模式，就浅谈与三层架构的的区别吧</p><p>首先呢，三层架构与MVC模式，肯定不是一个东西。</p><p>三层架构是 界面层（UIL）、业务逻辑层（BLL）、数据层（DAL），</p><p>M V C 是 model （模型）、view（视图）、Controller（控制器），</p><p>虽然看起来都是分为了三层，但是自己看 在三层架构中 是没有 控制器的，</p><p>MVC具体是将 数据的 输入 处理 输出 强制性的分开 其中控制器是不会输出任何东西和做任何处理的，它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。这一点要切记</p><p>这两种模式优点 耦合性低、重用性高、可维护性高</p><p>缺点则是 不适合小型，中等规模的应用程序，关键是会影响效率！！</p><p>自己也尝试写了一个mini版的文件共享系统，虽然按照MVC格式写的，但并不是严格规范写的，只能说是个半吊子把。因为view的数据还是要调用model取数据显示。</p><p>记录一下，让以后的我看看，这个垃圾代码就是我写的 <a href="http://download.zhaoshun.org/20180212/MiniFileShared.rar" title="点击下载" target="_blank" rel="noreferrer">点击下载</a></p>',11),n=[s];function p(i,c,_,l,d,m){return t(),a("div",null,n)}const C=e(r,[["render",p]]);export{u as __pageData,C as default};
