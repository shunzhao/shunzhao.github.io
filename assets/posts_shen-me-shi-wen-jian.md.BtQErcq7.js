import{_ as a,c as e,o as t,a3 as h}from"./chunks/framework.Cv3JQ2Vj.js";const u=JSON.parse('{"title":"什么是文件？","description":"","frontmatter":{"title":"什么是文件？","date":"2020-02-05T00:00:00.000Z"},"headers":[],"relativePath":"posts/shen-me-shi-wen-jian.md","filePath":"posts/shen-me-shi-wen-jian.md"}'),r={name:"posts/shen-me-shi-wen-jian.md"},i=h('<h1 id="什么是文件" tabindex="-1">什么是文件？ <a class="header-anchor" href="#什么是文件" aria-label="Permalink to &quot;什么是文件？&quot;">​</a></h1><p>在计算机中，&#39;记忆&#39;是以文件的形式保存的，文件就是一堆相关数据的集合，比如有一个my.TXT文本文件，里面有shunzi这六个字母，那么在存储器中存储的是83h 72h 85h 78h 90h 73h，这其实就是各个字母对应ASCII码，但不管是多一个数还是少一个数都没法表达shunzi这个意思，也正是这与表达的意思相关的ASCII码才最终组成了我们的my.TXT文件。</p><h2 id="文本文件与二进制文件" tabindex="-1">文本文件与二进制文件 <a class="header-anchor" href="#文本文件与二进制文件" aria-label="Permalink to &quot;文本文件与二进制文件&quot;">​</a></h2><p>像上面这种纯由ASCII码组成的文件，统一叫文本文件。除了文本文件外，还有一种叫做二进制文件。比如说将上面存储的83h 72h 85h 78h 90h这几个ASCII码对应的二进制给存到图片文件中，有可能表示的就不是shunzi了。而是图片文件格式的规定的表达意思。<br> 像图片，视频等文件中以二进制0和1存储文件统称为二进制文件，或许你会好奇，难道文本文件中存储的ASCII码不也是二进制吗？答案当然也是二进制，你可以理解为这些二进制是否按照ASCII码来解析，如果是，则它是文本文件，否则就是二进制文件。</p><h2 id="文件系统" tabindex="-1">文件系统 <a class="header-anchor" href="#文件系统" aria-label="Permalink to &quot;文件系统&quot;">​</a></h2><h3 id="什么是文件系统" tabindex="-1">什么是文件系统？ <a class="header-anchor" href="#什么是文件系统" aria-label="Permalink to &quot;什么是文件系统？&quot;">​</a></h3><p>管理、维护文件的系统。</p><h3 id="文件系统的由来" tabindex="-1">文件系统的由来 <a class="header-anchor" href="#文件系统的由来" aria-label="Permalink to &quot;文件系统的由来&quot;">​</a></h3><p>开头说过，在计算机中，文件是数据的抽象，要保存数据就得存储到一个地方，这个地方就是硬盘，说的再具体点是硬盘里的扇区，我们读写都是按扇区来算的。 假设一个扇区的固定大小为512字节，我有一个768字节的文件需要存储，那么就需要占用2个扇区也就是实际占用了1024字节的空间，现在我将这个文件存储在第一个硬盘中的0号盘片中的A面1号磁道上的2号和3号扇区上，那么我就要将这个信息给记下来，以便以后读取，并且再存其他文件的时候，也要绕过这块区域，以免数据被覆盖丢失，这样一两个文件还好，要是上百个文件还不得把人逼疯，所以文件系统就来拯救懒人了，这种苦活累活就有程序自动完成，文件系统目前也是操作系统中一个不可缺少的功能。</p><h3 id="文件系统的实现" tabindex="-1">文件系统的实现 <a class="header-anchor" href="#文件系统的实现" aria-label="Permalink to &quot;文件系统的实现&quot;">​</a></h3><p>操作系统中的文件系统在特定的磁盘扇区创建一个目录表，这个目录表中就记录了每个文件的名字，类型，大小，所在扇区，最后占用大小等信息。 <img src="http://images.zhaoshun.org/images/2022/02/28/1646059704.png" alt="image"> 最后实际大小这一项是为了得到正确的数据长度，前面说过存储是以扇区为单位的，My.txt虽然大小为768字节，但读的时候得到的是1024字节，所以需要有记录确保数据正确性。<br> 以上都只是以文件都在都同一层来解释的。但现在都是层次文件系统，就是文件夹中可以嵌套文件夹。将一个最简单的实现方式，就是在目录表中新增一项，判断是否为目录，如果是目录指向另一个目录表就可以了。</p><h3 id="碎片以及碎片整理" tabindex="-1">碎片以及碎片整理 <a class="header-anchor" href="#碎片以及碎片整理" aria-label="Permalink to &quot;碎片以及碎片整理&quot;">​</a></h3><p>有一点需要说明的是，存储的扇区不一定要连续的，比如上图中hello.c文件，所在的扇区为6和11，这种其实和内存一样属于随机存储，带来的好处是如果hello.c被修改后，文件大小增大了，那么只需要在增加扇区就可以了。但也有缺点，我再读取这个文件的时候，硬盘就需要先旋转到6号扇区，再转到11号扇区，如果跨度再大点，所需的时间也就越长。这种情况就叫做文件碎片。操作系统提供了一种文件碎片整理的工具可以解决这个问题，其实现就是将文件的扇区改为连续的，这样读起来时间就会快很多。</p><h3 id="扩展时间" tabindex="-1">扩展时间~ <a class="header-anchor" href="#扩展时间" aria-label="Permalink to &quot;扩展时间~&quot;">​</a></h3><p>现在仔细想一想，为什么被文件被删除了过后，正确的做法是不要乱动，然后用相应的软件可以恢复文件？快速格式化为什么能在极短的时间里把U盘清空？里面的文件真的被物理删除了吗？</p>',15),o=[i];function n(s,l,c,d,p,_){return t(),e("div",null,o)}const b=a(r,[["render",n]]);export{u as __pageData,b as default};
