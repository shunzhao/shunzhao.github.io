import{_ as r,c as t,o as e,a3 as a}from"./chunks/framework.Cv3JQ2Vj.js";const m=JSON.parse('{"title":"Linux笔记","description":"","frontmatter":{"title":"Linux笔记","date":"2018-04-11T00:00:00.000Z"},"headers":[],"relativePath":"posts/linux-ru-men-bi-ji.md","filePath":"posts/linux-ru-men-bi-ji.md"}'),b={name:"posts/linux-ru-men-bi-ji.md"},p=a('<h1 id="linux笔记" tabindex="-1">Linux笔记 <a class="header-anchor" href="#linux笔记" aria-label="Permalink to &quot;Linux笔记&quot;">​</a></h1><p><strong>应用程序层-&gt;shell层-&gt;内核(linux)-&gt;硬件</strong></p><p>linux下指令格式<br> 指令、选项、参数1,参数2</p><p><img src="http://shunzi.qiniudn.com/2018/04/201804116098_5399.png" alt="linux.png" title="linux.png"></p><p>reboot 重启<br> ll或ls 查看当前目录文件<br> date 查看时间<br> bc 是计算器<br> cal 日历指令<br> shutdown 关闭或重启计算机<br> shutdown -h now 立即关机<br> shutdown -h 1 一分钟后关机<br> shutdown -r now 立即重启<br> shutdown -r 1 一分钟后重启</p><p>tab键 具有命令补全与文件补齐的功能，<br> 如果输入ca 再按两次 [tab] 按键 那么就会显示所有ca开头的命令<br> 要善于使用tab键，会节约很多时间和减少错误率</p><p>ctrl+c 终止错误的命令或参数</p><p>sync 将内存中的数据存储到磁盘上<br> 推荐在关机或重启的之前使用下这个命令，防止在重启或关机的时候造成了数据的丢失</p><p>su -用户名，来切换用户<br> logint 注销当前账户（只在命令行中使用有效，图形界面是没用的）</p><p>useradd 增加用户<br> passwd 修改或设置用户密码<br> id 用户名， 查看用户信息<br> su - 用户名 切换用户<br> whoami 查看当前用户</p><h2 id="用户组" tabindex="-1">------------用户组 <a class="header-anchor" href="#用户组" aria-label="Permalink to &quot;\\------------用户组&quot;">​</a></h2><p>groupadd 创建用户组<br> groupdel 删除用户组<br> useradd -g 用户组 用户名 创建用户的时候为用户指定用户组<br> usermod -g 用户组 用户名 修改用户所在的用户组</p><h2 id="vim使用" tabindex="-1">vim使用 <a class="header-anchor" href="#vim使用" aria-label="Permalink to &quot;vim使用&quot;">​</a></h2><p>正常模式 打开就是<br> 插入模式 按i<br> 命令行模式 按esc键退出插入模式，然后输入:号，q!是编辑了但是不保存，q是没有编辑，只是看了一眼直接退出 wq是编辑了保存</p><p>YY是复制 5yy就是复制5行 类似于windows下的 ctrl+c p就是粘贴 ctrl+v<br> dd是删除<br> /关键字 就是查找某一个关键字 类似于windows下的 ctrl+f<br> set nu 显示行数， set nonu 不显示当前行数<br> gg 跳转到行首 ，G跳转到行尾<br> u 撤销操作，类似于windows 的 ctrl+z<br> 跳转到某一行，行数 shift+g（刚开始按错成shift+h没想到也跳转到了）</p><h2 id="_20180409" tabindex="-1">****************************20180409 <a class="header-anchor" href="#_20180409" aria-label="Permalink to &quot;\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*20180409&quot;">​</a></h2><p>mkdir 创建文件夹 mkdir -p 创建多级文件夹<br> rmdir 删除文件夹（rmdir只能删除空文件夹） rm -rf 删除文件夹</p><p>touch 创建一个空文件 touch 文件名，【文件名2，文件名3】</p><p>cp（copy）拷贝文件，cp 【选项】 文件名 带上-r选项则可以递归拷贝文件夹 如果前面带上\\则强制移动</p><p>rm(remove) rm 删除的文件名或目录，rm -rf 递归删除整个文件夹，-f 强制删除文件不提示</p><p>mv（move）移动文件或重命名文件 mv 1.txt 2.txt(将当前目录下的1.txt重命名成2.txt)<br> mv 1.txt /test （将当前目录下的1.txt移动到/test文件夹下）</p><h2 id="_20180411" tabindex="-1">****************************20180411 <a class="header-anchor" href="#_20180411" aria-label="Permalink to &quot;\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*20180411&quot;">​</a></h2><p>cat 【-n】 以只读的形式一次性全部查看文件（只能都不能写）-n显示行数<br> more 以只读的形式一次性分页查看文件 与上面不同的是，分页的形式查看<br> less 以只读的形式瀑布流的形式慢慢加载查看，不会一次性全部打开，而是看到哪里加载到哪里，适合大文件<br> &gt; 覆盖写入 &gt;&gt; 追加写入 demo<br> date &gt; shunzi.txt (将date显示的日期覆盖写入到shunzi.txt文件中，如果文件不存在则创建文件)<br> date &gt;&gt; shunzi.txt (将date显示的日期追加写入到shunzi.txt文件中，如果文件不存在则创建文件)<br> echo 输出语句，输出到控制台，常用于echo出环境变量，如 echo $PATH<br> head 显示某个文件头10行（默认）的信息 可以自己指定，比如 head -n 5 test.txt （就是只显示5行）<br> tail(尾巴的意思) 与head相反 显示某个文件尾部10行(默认)的信息，也可以自己指定 ，指定方式同head<br> （tail 还有一个参数 -f 用于实时追踪文件所有更新，工作中经常使用）<br> ln 创建一个软链接，类似于win上面的快捷方式， ln 源地址 快捷地址 tips:pwd的时候还是会显示员目录<br> history 显示历史记录命令，不带参数则显示所有，history 5 显示5条 如果要执行历史记录中的某一个命令 只需要!行数</p><p>****************************20180412<br> find(找到的意思) 参数有 -name -user -size(+n大于字写 -n小于字写 n等于字写) 语法(find 路径名 -参数 参数值)<br> demo 在根目录下找名字为shunzi.txt的文件 find / -name shunzi.txt<br> locate 可以实现快速定位文件，但是要创建locate数据库 并且为了准确度还要时常更新locate数据库<br> 如果是第一次使用或者是更新数据库 可以使用 updatedb 指令 查找文件使用 locate 文件名<br> grep 在文件中查找某一字段，类似于ctrl+F，参数 -n（显示行号） -i(忽略字母大小写) 语法 grep [选项] 查找内容 源文件<br> | 管道符号，在linux很重要，作用就是将前一个命令的结果传递到下一个命令。<br> demo cat shunzi.txt | grep -nl shunzi (将cat打开的shunzi.txt的显示结果给grep命令中找shunzi这个关键字)</p><p>****************************20180413</p><p>解压缩文件命令<br> *.gz<br> 压缩文件：gzip 文件名<br> 解压文件：gunzip 文件名<br> tips:当用gzip压缩文件的时候，不会保留原来的文件 不常用</p><p>压缩文件：zip [-r] 文件名 -r递归整个文件夹压缩<br> 解压文件：unzip [-d] 解压到目录 文件名 -d 指定解压目录<br> tips:常用</p><p>解压缩文件：tar[选项] 文件名<br> -c 产生.tar打包文件<br> -v 显示详细信息<br> -f 指定压缩后的文件名<br> -z 打包同时压缩<br> -x 解包.tar文件</p><p>压缩文件：tar -zcvf 指定文件名 压缩的文件1 压缩的文件2<br> 解压文件：tar -zxvf 指定文件名 [-C 解压到的目录]</p><p>组管理<br> 修改文件所有者：chown 修改后所有人 文件名<br> 修改文件所在组：chgrp 修改后所在组 文件名<br> （如果想一起改变文件的所有者和所在组 则可以连着写 demo chown newuser:newgrp filename<br> 如果是目录 则可以带上-R参数来递归改变旗下所有子文件或目录<br> chgrp 也有-R参数<br> ）<br> 修改用户所在组：usermod -g 修改后所在组 用户名<br> 修改用户登录目录：usermod -d 修改后所在组 用户名</p><p>查看当前系统在线人员 who</p><p>文件权限<br> -rw-r--r-- 第一个字符（-）为文件类型 有三种 -为普遍文件 d为目录 -l为软链接<br> 除了开头第一个字符外，其余的每三个为一组，分别有rwx 对应着 读写执行 第一组为所有者，第二组为所在组，第三组为其他组<br> 修改文件的权限<br> chmod u=xxx|g=xxx|o=xxx|a=xxx 文件名 u代表着(所有者) g代表着(所在组) o代表着(其他组) a代表着(u,g,o的总和、所有人)<br> 权限除了通过r(read)、w(write)、x(execute)还可以通过数字的方式来表示 r代表着4 w代表着2 x代表1 demo rwx|7(4+2+1)</p><h2 id="_20180415" tabindex="-1">****************************20180415 <a class="header-anchor" href="#_20180415" aria-label="Permalink to &quot;\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*20180415&quot;">​</a></h2><p>任务调度（可以理解为就是定时任务，定时执行命令）<br> crontab 参数 [-e(编辑任务 edit) -r(清空任务 remove) -l(查看任务 lisr) -restart(重启)]<br> * * * * * * 第一位代表分钟 第二位代表小时 第三位代表天数、第四位代表月份、第五位代表星期<br> 特殊符号 * 代表每分钟都执行 */n 可以给定参数n 指定每多少分钟执行 ,代表着不连续的时间可以理解为| -代表着连续的时间范围</p><h2 id="_20180416" tabindex="-1">****************************20180416 <a class="header-anchor" href="#_20180416" aria-label="Permalink to &quot;\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*20180416&quot;">​</a></h2><p>linux 磁盘分区<br> linux下一切都是文件，磁盘也是。<br> 磁盘基础知识，mbr（最多只有4个分区，且最大只能2T）、gtp（理论无限分区，最大是18EB）<br> 磁盘分为主分区和扩展分区，扩展分区又可以分为逻辑分区<br> linux下磁盘以abcd...排序，对应第几块磁盘，磁盘下的分区以1234...排序，对应第几个分区<br> linux磁盘分IDE磁盘和SCSI磁盘。ide对应标识符为hdx SCSI对应标识符为sd 现在普遍是sd<br> linux下一个分区对应着一个目录.<br> linux下查看系统磁盘分区和挂载情况 lsblk [-f]<br> 新增磁盘分区<br> 1),先分区、分区命令 fdisk 磁盘名 tips： disk(磁盘的意思)<br> *m(显示命令列表)、*p(显示磁盘分区 同fdisk -1)、*n(新增分区)、*d(删除分区)、*w(写入并退出)<br> 先输入a、然后p，分区类型为主分区、两次回车键默认剩余全部空间、最后w写入退出，如果不保存则是q<br> 2),格式化、mkfs -t ext4(文件类型) 分区盘符<br> 3),临时挂载 、mount 分区盘符(或者是磁盘UUID) 挂载到的目录<br> 4),永久挂载 、需要编辑 vim /etc/fstab<br> 内容是 分区盘符(或者是磁盘UUID) 挂载到的目录 文件类型 默认 默认数值00或11</p><p>umount 卸载挂载 命令： umount 设备名称或者是挂载目录</p><p>磁盘情况查询<br> df [-l(list)|-h(带计量单位)]<br> 查询指定目录的磁盘占用情况<br> du [-h|-s(指定目录占用大小汇总)|-a(包括文件)|-c(列出明细的同时，还汇总)] [--max-depth=1 子目录深度]<br> 递归参数 -R<br> 过滤指定（类似正则）<br> grep &quot;^-(正则表达式)&quot; wc -l 汇总，统计总数</p><h2 id="_20180418" tabindex="-1">****************************20180418 <a class="header-anchor" href="#_20180418" aria-label="Permalink to &quot;\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*20180418&quot;">​</a></h2><p>网络配置<br> 设置静态ip：<br> 修改配置文件来指定ip（推荐）<br> /etc/sysconfig/network-scripts/ifcfg-eth0 tips:如果有两个网卡，那么第二个网卡就是eth1<br> 文件内容说明</p><p>进程管理<br> ps命令用来查看目前系统中，有哪些正在执行，以及它们执行的情况，可以不加参数<br> PID 进程识别号 TTY终端机号 TIME占用CPU时间 CMD正在执行的命令或进程名<br> 常用参数 -a 查看所有 -u 以用户的格式显示进程信息 -x 显示后台进程运行的参数</p><p>kill [-9（强制杀死进程）] 杀死进程<br> killall 杀死多个进程 比如一次杀死所有sshd 进程 那么killall sshd 就是杀死所有 sshd 进程</p><p>psthee 用树状图查看进程 参数有两个，-u 以用户的形式查看 -p 显示进程的PID</p><p>管理指令<br> service 服务名 [start|stop|restart|reload|status] tips：该指令只能临时关闭某个服务 如果想要永久生效 chkconfig<br> demo： 比如临时关闭防火墙 service iptables stop</p><p>查看服务 查看哪个服务自启动<br> setup 不过这个指令是图形界面<br> vim /etc/init.d/ 文件形式查看</p><p>运行级别 0-6 可以设置某个服务的某个级别是否自启动<br> chkconfig 可以设置永久关闭某个服务或设置某个级别是否自启动<br> demo：查看所有服务 chkconfig --list<br> demo：关闭在级别为5时 关闭mysql 服务 chkconfig --level 5 mysql off<br> tips : 设置后需要重启才生效</p><p>top 动态监控进程 (默认每3秒刷新一次)<br> top -u 用户名 可以指定查看某个用户的进程 (也可以直接top 然后在里面按下U 再输入用户名)<br> top -k PID 就可以杀死某个进程<br> top -d 秒数</p><p>网络服务监控<br> netstat [-anp(-an按一定顺序排列输出,p显示哪个进程在调用)]<br> 可以看到哪个端口的网络服务被使用</p><h2 id="_20180421" tabindex="-1">****************************20180421 <a class="header-anchor" href="#_20180421" aria-label="Permalink to &quot;\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*20180421&quot;">​</a></h2><p>rpm包的管理<br> 简单的查询指令<br> rpm [-q(query)|-a(all)]<br> 查询软件是否安装(和Qa没什么区别)<br> rpm [-q(query)]<br> 查询软件版本、信息<br> rpm [-qi]<br> 查看软件安装了哪些文件<br> rpm [-ql]<br> 与上面的命令相反。反过来查询，查询某个文件所属于哪个软件包<br> rpm [-qf]<br> 卸载rmp包<br> rpm [-e] rmp的包名称 tips：是否强制删除(强烈不推荐) rmp [-e] --nodeps rmp的包名称<br> 安装rmp包<br> rpm [-i(install安装)v(verbose提示)h(hash进度条)] rpm包全路径名称</p><p>yum包的管理(与rpm包一样，可以自动处理依赖关系)<br> 查看yum服务器上所有的软件<br> yum list<br> 安装yum服务器上的软件<br> yum install</p>',51),i=[p];function n(s,o,l,d,h,u){return e(),t("div",null,i)}const x=r(b,[["render",n]]);export{m as __pageData,x as default};
