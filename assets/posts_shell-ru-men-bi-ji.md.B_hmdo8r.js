import{_ as e,c as l,o as a,a3 as o}from"./chunks/framework.Cv3JQ2Vj.js";const $=JSON.parse('{"title":"Shell笔记","description":"","frontmatter":{"title":"Shell笔记","date":"2017-03-27T00:00:00.000Z"},"headers":[],"relativePath":"posts/shell-ru-men-bi-ji.md","filePath":"posts/shell-ru-men-bi-ji.md"}'),t={name:"posts/shell-ru-men-bi-ji.md"},h=o('<h1 id="shell笔记" tabindex="-1">Shell笔记 <a class="header-anchor" href="#shell笔记" aria-label="Permalink to &quot;Shell笔记&quot;">​</a></h1><h1 id="_1-不推荐-sh-shell文件路径" tabindex="-1">（1）不推荐 sh shell文件路径 <a class="header-anchor" href="#_1-不推荐-sh-shell文件路径" aria-label="Permalink to &quot;（1）不推荐 sh shell文件路径&quot;">​</a></h1><h1 id="_2-推荐-给-shell文件可执行权限-shell文件路径" tabindex="-1">（2）推荐 给 shell文件可执行权限 shell文件路径 <a class="header-anchor" href="#_2-推荐-给-shell文件可执行权限-shell文件路径" aria-label="Permalink to &quot;（2）推荐 给 shell文件可执行权限   shell文件路径&quot;">​</a></h1><p>#首先还是程序入门第一章 输出 hello world<br> echo hello world echo &#39;hello world&#39; echo &quot;hello world&quot; #系统变量有 $HOME $PATH $USER $PWD等 显示shell变量中所有的变量 直接 set #自定义变量 需要注意的地方有两点 #第一点 定义变量的时候不需要加$符号，但是输出的时候需要加$符号 #第二点 变量与等号与变量值之间不得有空格，不然会报错，这点与其他编程语言的书写规范有所不同 a=10<br> echo &quot;a=$a&quot; #删除变量 unset a #定义静态变量 但是静态变量不能通过unset来删除 readonly b=1 echo &#39;b=$b&#39; unset b #这样会报错 #将命令的返回值赋值给变量 #第一种写法<br> result=`ll` #第二种写法 等价于反引号 result2=$(date)</p><p>#设置全局环境变量 和windows下的配置环境变量是一个道理 这样就可以在其他shell文件中使用了 修改/etc/profile 变量名=变量值 export 变量名 #刷新 source /etc/profile<br> source /etc/profile #位置参数变量 #$n n代表数字 $0 代表命令本身 $1-$9 代表第1-9个参数 第十个参数以上则需要使用大括号$(10) #$* 这个变量代表命令行中的所有参数 $*把所有参数当成一个整体 #$@ 这个变量也代表命令行中的所有参数 但但但是$@把每个参数区别对待 #$# 这个变量代表参数的个数 #demo: #bash&gt; ./demo.sh 1 2 3 #预定义变量</p><h1 id="代表当前进程的进程号-pid" tabindex="-1">$$ 代表当前进程的进程号(PID) <a class="header-anchor" href="#代表当前进程的进程号-pid" aria-label="Permalink to &quot;$$ 代表当前进程的进程号(PID)&quot;">​</a></h1><p>echo &quot;$$&quot;</p><h1 id="后台运行的最后一个进程的进程号-pid" tabindex="-1">后台运行的最后一个进程的进程号(PID) <a class="header-anchor" href="#后台运行的最后一个进程的进程号-pid" aria-label="Permalink to &quot;后台运行的最后一个进程的进程号(PID)&quot;">​</a></h1><p>echo &quot;$!&quot;</p><h1 id="最后一次执行命令的返回状态" tabindex="-1">最后一次执行命令的返回状态 <a class="header-anchor" href="#最后一次执行命令的返回状态" aria-label="Permalink to &quot;最后一次执行命令的返回状态&quot;">​</a></h1><p>#如果这个值为0 证明上一个命令正确执行， #如果这个变量的值非0(具体是哪个数，由命令自己决定) 则证明上一个命令执行不正确 echo &quot;$?&quot; #将命令后台运行 只需要在命令后添加&amp;符号就可以 #demo ./demo2.sh &amp; #后台执行demo2.sh这个文件</p>',11),s=[h];function r(i,d,n,c,u,p){return a(),l("div",null,s)}const m=e(t,[["render",r]]);export{$ as __pageData,m as default};
