import{_ as i,c as s,o as a,a3 as t}from"./chunks/framework.Cv3JQ2Vj.js";const c=JSON.parse('{"title":"又一次BigDecimal使用不当的造成的问题","description":"","frontmatter":{"title":"又一次BigDecimal使用不当的造成的问题","date":"2024-07-09T00:00:00.000Z"},"headers":[],"relativePath":"posts/you-yi-ci-BigDecimal-shi-yong-bu-dang-de-zao-cheng-de-wen-ti.md","filePath":"posts/you-yi-ci-BigDecimal-shi-yong-bu-dang-de-zao-cheng-de-wen-ti.md"}'),n={name:"posts/you-yi-ci-BigDecimal-shi-yong-bu-dang-de-zao-cheng-de-wen-ti.md"},l=t(`<h1 id="又一次bigdecimal使用不当的造成的问题" tabindex="-1">又一次BigDecimal使用不当的造成的问题 <a class="header-anchor" href="#又一次bigdecimal使用不当的造成的问题" aria-label="Permalink to &quot;又一次BigDecimal使用不当的造成的问题&quot;">​</a></h1><p>前天被技术支持艾特查问题，问题是库存有 0.084 为什么用户输入 0.084 提示“库存有变动，请重试”，发现是前同事埋的坑，而且这个坑 23 年写的，到今年才被发现，也是很神奇，这也不是第一次遇到了，以前的项目也碰到过使用不当造成的 bug 。</p><p>今天这个问题根据提示很快就找到了对应的位置，总共有两个地方判断。</p><p>第一个是判断如果从数据库中没有查询到数据就会提示，这里是为了防止提交时别的用户已经作业了。</p><p>第二个是判断当前用户输入的数量是否大于数据库中的库存，如果大于则提示，被拦截的地方也就是这里。</p><p>看一下伪代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputStock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInputStock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal inputStockBigDecimal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputStock);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从数据库查询数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BigDecimal totalBigDecimal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BigDecimal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BigDecimal.ZERO, BigDecimal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">add);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果输入的大于数据库中的则拦截</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputStockBigDecimal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(totalBigDecimal) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BaseException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;库存有变动，请重试&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>看到了问题所在没有？</p><p>总计有两个地方有问题：</p><ol><li><p>BigDecimal.valueOf(inputStock);</p><p>这里的问题是使用错了，<strong>我猜测想法是好的，知道应该使用 BigDecimal.valueOf 来初始化</strong>，因为其底层使用了<strong>先转成 String 类型再构建以避免丢失精度的问题发生</strong>，但是却<strong>忽略了 inputStock 是一个 float 类型，而 valueOf() 接收的是一个 double 类型</strong>，所以这里会<strong>自动的进行类型转换，把原来输入的 0.084 float 转换为了一个近似值 0.08399999886751175 的 double</strong>，之后 valueOf 将其变成字符串 &quot;0.08399999886751175&quot; 去构建，导致其<strong>存储就错了</strong>。</p></li><li><p>BigDecimal totalBigDecimal = arr.stream().map(BigDecimal::new).reduce(BigDecimal.ZERO, BigDecimal::add);</p><p>这里的问题更多，首先这里使用的是 <strong>BigDecimal::new</strong>，也就是 new BigDecimal(float) 来构建，本身就会导致精度丢失，导致其最终是变成了 0.083999998867511749267578125，其次<strong>转换逻辑也不统一</strong>（我认为是罪魁祸首），因为就算上面的 BigDecimal.valueOf 使用的不对，但是如果转换逻辑统一的话，至少这里 totalBigDecimal 和 inputStockBigDecimal 也都会是 0.08399999886751175 ，判断也能通过。</p></li></ol><p>所以当我们要将某个数值类型转换为 BigDecimal 时，一定要记住，<strong>BigDecimal.value() 只适用于 Long、Double 类型</strong>，<strong>new BigDecimal() 构造器创建时只适用于 String 类型</strong>，为了降低心智负担，建议所有的数值类型都先转成 String，然后再用构造器创建，这样就可以只用记住一种方法了。</p>`,11),e=[l];function p(h,k,g,r,o,E){return a(),s("div",null,e)}const y=i(n,[["render",p]]);export{c as __pageData,y as default};
